<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\BT_NFC.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\BT_NFC.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Wed Mar 08 16:40:00 2023
<BR><P>
<H3>Maximum Stack Usage =        344 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
BLE_Handler &rArr; LSLCirq_IRQ_Handler &rArr; LE_LL_Ctrl_Handle_LE_IRQ &rArr; LE_LL_Ctrl_Handle_Connection_Event &rArr; _LEconnection_Close_Connection_Event &rArr; LEconnection_Connection_Update &rArr; LEeventgen_Generate_LE_Meta_Event &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[64]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[8]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">NMI_Handler</a><BR>
 <LI><a href="#[9]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">HardFault_Handler</a><BR>
 <LI><a href="#[a]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">MemManage_Handler</a><BR>
 <LI><a href="#[b]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">BusFault_Handler</a><BR>
 <LI><a href="#[c]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">UsageFault_Handler</a><BR>
 <LI><a href="#[d]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">SVC_Handler</a><BR>
 <LI><a href="#[e]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">DebugMon_Handler</a><BR>
 <LI><a href="#[24]">AES_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">AES_Handler</a><BR>
 <LI><a href="#[70]">HCeg_Generate_Event</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6f]">BTq_Enqueue</a><BR>
 <LI><a href="#[4b]">_sys_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4b]">_sys_exit</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[24]">AES_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[11]">BLE_Handler</a> from sys_irq.o(i.BLE_Handler) referenced from startup_xinc.o(RESET)
 <LI><a href="#[b]">BusFault_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[13]">CPR_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[12]">DMAS_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[e]">DebugMon_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[22]">GADC_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[14]">GPIO_Handler</a> from bsp_gpio.o(i.GPIO_Handler) referenced from startup_xinc.o(RESET)
 <LI><a href="#[9]">HardFault_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[1b]">I2C_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[20]">KBS_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[2a]">LE_LL_Connection_Update_Req</a> from le_link_layer.o(i.LE_LL_Connection_Update_Req) referenced from le_link_layer.o(.data)
 <LI><a href="#[2d]">LE_LL_Enc_Req</a> from le_link_layer.o(i.LE_LL_Enc_Req) referenced from le_link_layer.o(.data)
 <LI><a href="#[31]">LE_LL_Feature_Req</a> from le_link_layer.o(i.LE_LL_Feature_Req) referenced from le_link_layer.o(.data)
 <LI><a href="#[32]">LE_LL_Pause_Enc_Req</a> from le_link_layer.o(i.LE_LL_Pause_Enc_Req) referenced from le_link_layer.o(.data)
 <LI><a href="#[33]">LE_LL_Pause_Enc_Rsp</a> from le_link_layer.o(i.LE_LL_Pause_Enc_Rsp) referenced from le_link_layer.o(.data)
 <LI><a href="#[35]">LE_LL_Reject_Ind</a> from le_link_layer.o(i.LE_LL_Reject_Ind) referenced from le_link_layer.o(.data)
 <LI><a href="#[2f]">LE_LL_Start_Enc_Rsp</a> from le_link_layer.o(i.LE_LL_Start_Enc_Rsp) referenced from le_link_layer.o(.data)
 <LI><a href="#[2c]">LE_LL_Terminate_Ind</a> from le_link_layer.o(i.LE_LL_Terminate_Ind) referenced from le_link_layer.o(.data)
 <LI><a href="#[2e]">LE_LL_UnSupported_Pdu</a> from le_link_layer.o(i.LE_LL_UnSupported_Pdu) referenced 3 times from le_link_layer.o(.data)
 <LI><a href="#[30]">LE_LL_Unknown_Rsp</a> from le_link_layer.o(i.LE_LL_Unknown_Rsp) referenced from le_link_layer.o(.data)
 <LI><a href="#[34]">LE_LL_Version_Ind</a> from le_link_layer.o(i.LE_LL_Version_Ind) referenced from le_link_layer.o(.data)
 <LI><a href="#[2b]">LEfreq_Update_Channel_Map_Req</a> from le_frequency.o(i.LEfreq_Update_Channel_Map_Req) referenced from le_link_layer.o(.data)
 <LI><a href="#[a]">MemManage_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[8]">NMI_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[f]">PendSV_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[21]">QDEC_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[15]">RTC_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[7]">Reset_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[23]">SIM_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[1e]">SPI0_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[1f]">SPI1_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[d]">SVC_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[10]">SysTick_Handler</a> from bsp_systick.o(i.SysTick_Handler) referenced from startup_xinc.o(RESET)
 <LI><a href="#[25]">SystemInit</a> from system_xinc.o(i.SystemInit) referenced from startup_xinc.o(.text)
 <LI><a href="#[16]">TIMER0_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[17]">TIMER1_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[18]">TIMER2_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[19]">TIMER3_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[1c]">UART0_Handler</a> from bsp_uart.o(i.UART0_Handler) referenced from startup_xinc.o(RESET)
 <LI><a href="#[1d]">UART1_Handler</a> from bsp_uart.o(i.UART1_Handler) referenced from startup_xinc.o(RESET)
 <LI><a href="#[c]">UsageFault_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[1a]">WDT_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[36]">__main</a> from __main.o(!!!main) referenced from startup_xinc.o(.text)
 <LI><a href="#[28]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[29]">dummy_handler</a> from btstack_tick.o(i.dummy_handler) referenced from btstack_tick.o(.data)
 <LI><a href="#[27]">fputc</a> from bsp_retarget.o(i.fputc) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[36]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[38]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[3a]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[119]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[11a]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[3b]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[11b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[55]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[3c]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[3d]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[3f]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[44]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[11c]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[11d]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[11e]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[11f]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[120]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[121]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[122]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[123]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[124]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[125]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[126]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[127]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[128]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[129]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[12a]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[12b]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[12c]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[12d]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[12e]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[12f]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[130]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[49]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[131]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[132]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[133]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[134]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[135]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[136]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[137]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[138]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[39]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[139]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[41]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[43]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[13a]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[45]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; CV663_Read_Card &rArr; PiccRequest &rArr; PcdConfig_CV663 &rArr; phhalHw_CV663_Cmd_LoadProtocol &rArr; PcdTransceive_CV663 &rArr; Delay_us &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[13b]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[66]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[48]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[13c]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[4a]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEll_Decode_Advertising_ChannelPDU
</UL>

<P><STRONG><a name="[13d]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[7]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>AES_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>CPR_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DMAS_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>GADC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>I2C_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>KBS_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>QDEC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RTC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SIM_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SPI0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SPI1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIMER0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIMER1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIMER2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIMER3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>WDT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_xinc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[13e]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>__2printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRc663_Lpcd_GetCfg
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CV663_Read_Card
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CV663_Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Handler
</UL>

<P><STRONG><a name="[5f]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[60]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[3e]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[50]"></a>_printf_longlong_hex</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[40]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[51]"></a>_printf_ll_hex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[52]"></a>_printf_hex_ptr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_hex_int_ll_ptr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[53]"></a>__printf</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccSelect
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccAnticoll
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccRead
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccAuthState
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccAnticollSelect
</UL>

<P><STRONG><a name="[140]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[58]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[141]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEllc_Encode_PDU
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Encrypt_Payload
</UL>

<P><STRONG><a name="[142]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[143]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRc663_Cmd_Lpcd
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Connection_Update_Req
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEfreq_Get_Next_Data_Channel_Frequency
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Handle_Connection_Event
</UL>

<P><STRONG><a name="[144]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[145]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>

<P><STRONG><a name="[149]"></a>_dfixu</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dfixui.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[5c]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>

<P><STRONG><a name="[14a]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>

<P><STRONG><a name="[14b]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>

<P><STRONG><a name="[14c]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[4d]"></a>_printf_char_file</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[4e]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[61]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[14d]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[14e]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[47]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[11]"></a>BLE_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sys_irq.o(i.BLE_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = BLE_Handler &rArr; LSLCirq_IRQ_Handler &rArr; LE_LL_Ctrl_Handle_LE_IRQ &rArr; LE_LL_Ctrl_Handle_Connection_Event &rArr; _LEconnection_Close_Connection_Event &rArr; LEconnection_Connection_Update &rArr; LEeventgen_Generate_LE_Meta_Event &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>BTq_Ack_Last_Dequeued</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, tra_queue.o(i.BTq_Ack_Last_Dequeued))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = BTq_Ack_Last_Dequeued &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Interrupts_Restore_Flags
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Disable_Interrupts_Save_Flags
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Get_Data_Queue_Ref
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Deallocate_Header
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Hardware_Error_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Decode_DataPDU
</UL>

<P><STRONG><a name="[6e]"></a>BTq_Commit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tra_queue.o(i.BTq_Commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BTq_Commit
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Interrupts_Restore_Flags
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Disable_Interrupts_Save_Flags
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Decode_DataPDU
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEllc_Encode_PDU
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEeventgen_Generate_LE_Meta_Event
</UL>

<P><STRONG><a name="[6f]"></a>BTq_Enqueue</STRONG> (Thumb, 368 bytes, Stack size 96 bytes, tra_queue.o(i.BTq_Enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Interrupts_Restore_Flags
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Disable_Interrupts_Save_Flags
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Get_Data_Queue_Ref
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Allocate_Header
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSatomic_Increment_u_int8
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Decode_DataPDU
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEllc_Encode_PDU
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEeventgen_Generate_LE_Meta_Event
</UL>

<P><STRONG><a name="[98]"></a>BTq_Get_Queue_Number_Of_Entries</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tra_queue.o(i.BTq_Get_Queue_Number_Of_Entries))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Prevent_HCI_Event_Queue_from_Overfill
</UL>

<P><STRONG><a name="[73]"></a>BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tra_queue.o(i.BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks &rArr; BTq_Reduce_Queue_Number_Of_Processed_Chunks
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Reduce_Queue_Number_Of_Processed_Chunks
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Release_All_Data_Queue_Packets
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Reset
</UL>

<P><STRONG><a name="[ad]"></a>BTq_Is_Queue_Empty</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tra_queue.o(i.BTq_Is_Queue_Empty))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_Connection_Event
</UL>

<P><STRONG><a name="[75]"></a>BTq_LE_Dequeue_Next</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, tra_queue.o(i.BTq_LE_Dequeue_Next))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BTq_LE_Dequeue_Next
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Interrupts_Restore_Flags
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Disable_Interrupts_Save_Flags
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Encode_DataPDU
</UL>

<P><STRONG><a name="[74]"></a>BTq_Reduce_Queue_Number_Of_Processed_Chunks</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, tra_queue.o(i.BTq_Reduce_Queue_Number_Of_Processed_Chunks))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BTq_Reduce_Queue_Number_Of_Processed_Chunks
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Interrupts_Restore_Flags
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Disable_Interrupts_Save_Flags
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Get_Data_Queue_Ref
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks
</UL>

<P><STRONG><a name="[76]"></a>BTq_Reset</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, tra_queue.o(i.BTq_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BTq_Reset &rArr; BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks &rArr; BTq_Reduce_Queue_Number_Of_Processed_Chunks
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Deallocate_Header
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Initialise_Variable_Chunk_Queue
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Initialise_Data_Queue
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Release_All_Data_Queue_Packets
</UL>

<P><STRONG><a name="[b8]"></a>BTtimer_Is_Expired_For_Time</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bt_timer.o(i.BTtimer_Is_Expired_For_Time))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_LE_IRQ
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Advertising_Event_Complete
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Is_Next_Adv_Due
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Handle_Connection_Event
</UL>

<P><STRONG><a name="[79]"></a>BTtimer_Set_Ticks</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bt_timer.o(i.BTtimer_Set_Ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BTtimer_Set_Ticks &rArr; HW_Get_Native_Clk_Avoid_Race &rArr; HWdelay_Wait_For_us
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Set_Advertise_Enable
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Version_Ind
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Pause_Enc_Rsp
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Pause_Enc_Req
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Enc_Req
</UL>

<P><STRONG><a name="[7b]"></a>Buzzer_Beep</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, buzzer.o(i.Buzzer_Beep))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Buzzer_Beep &rArr; Delay_us &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_low
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_high
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CV663_Read_Card
</UL>

<P><STRONG><a name="[80]"></a>CV663_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cv663.o(i.CV663_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = CV663_Init &rArr; PcdConfig_CV663 &rArr; phhalHw_CV663_Cmd_LoadProtocol &rArr; PcdTransceive_CV663 &rArr; Delay_us &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReset_CV663
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdConfig_CV663
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CV663_SPI_Init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>CV663_Read_Card</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, cv663.o(i.CV663_Read_Card))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = CV663_Read_Card &rArr; PiccRequest &rArr; PcdConfig_CV663 &rArr; phhalHw_CV663_Cmd_LoadProtocol &rArr; PcdTransceive_CV663 &rArr; Delay_us &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_high
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccReset
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccRequest
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccRead
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccAuthState
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccAnticollSelect
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED1
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Beep
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRc663_Cmd_Lpcd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_s
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>CV663_SPI_Init</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, cv663.o(i.CV663_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CV663_SPI_Init &rArr; gpio_direction_input
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_low
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_high
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mux_ctl
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_direction_output
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_direction_input
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CV663_Init
</UL>

<P><STRONG><a name="[90]"></a>ClearBitMask_CV663</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cv663.o(i.ClearBitMask_CV663))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ClearBitMask_CV663 &rArr; Read_CV663
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_CV663
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CV663
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccRequest
</UL>

<P><STRONG><a name="[7f]"></a>Delay_ms</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, m0_delay.o(i.Delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccReset
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Beep
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReset_CV663
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdConfig_CV663
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLED_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CV663_Read_Card
</UL>

<P><STRONG><a name="[8c]"></a>Delay_s</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, m0_delay.o(i.Delay_s))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CV663_Read_Card
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>Delay_us</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, m0_delay.o(i.Delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Delay_us &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Beep
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdTransceive_CV663
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRc663_Lpcd_GetCfg
</UL>

<P><STRONG><a name="[14]"></a>GPIO_Handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bsp_gpio.o(i.GPIO_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = GPIO_Handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>HCeg_Generate_Event</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, hc_event_gen.o(i.HCeg_Generate_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Is_Event_Masked_On
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Prevent_HCI_Event_Queue_from_Overfill
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Hardware_Error_Event
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Version_Ind
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Unknown_Rsp
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Start_Enc_Rsp
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Reject_Ind
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Close_Connection_Event
</UL>

<P><STRONG><a name="[6a]"></a>HCeg_Hardware_Error_Event</STRONG> (Thumb, 30 bytes, Stack size 64 bytes, hc_event_gen.o(i.HCeg_Hardware_Error_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Prevent_HCI_Event_Queue_from_Overfill
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Ack_Last_Dequeued
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEllc_Encode_PDU
</UL>

<P><STRONG><a name="[95]"></a>HCeg_Is_Event_Masked_On</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hc_event_gen.o(i.HCeg_Is_Event_Masked_On))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEeventgen_Generate_LE_Meta_Event
</UL>

<P><STRONG><a name="[97]"></a>HCeg_Prevent_HCI_Event_Queue_from_Overfill</STRONG> (Thumb, 38 bytes, Stack size 64 bytes, hc_event_gen.o(i.HCeg_Prevent_HCI_Event_Queue_from_Overfill))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Get_Queue_Number_Of_Entries
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Hardware_Error_Event
</UL>

<P><STRONG><a name="[99]"></a>HCfc_Release_All_Data_Queue_Packets</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, hc_flow_control.o(i.HCfc_Release_All_Data_Queue_Packets))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HCfc_Release_All_Data_Queue_Packets &rArr; BTq_Reset &rArr; BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks &rArr; BTq_Reduce_Queue_Number_Of_Processed_Chunks
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Reset
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Local_Disconnect
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Reset_Connection
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Close_Connection_Event
</UL>

<P><STRONG><a name="[b7]"></a>HW_Get_Bt_Clk_Avoid_Race</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hw_lc.o(i.HW_Get_Bt_Clk_Avoid_Race))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Update_Next_Slave_Connection_Event_Time
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_LE_IRQ
</UL>

<P><STRONG><a name="[7a]"></a>HW_Get_Native_Clk_Avoid_Race</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, hw_lc.o(i.HW_Get_Native_Clk_Avoid_Race))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HW_Get_Native_Clk_Avoid_Race &rArr; HWdelay_Wait_For_us
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Wait_For_us
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Ticks
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_LE_IRQ
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Set_Next_Advertising_Event_Start_Timer
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_InactiveSlots
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Decode_DataPDU
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Close_Connection_Event
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEllc_Encode_PDU
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Setup_First_Connection_Event
</UL>

<P><STRONG><a name="[112]"></a>HWdelay_Wait_For_Serial_Interface_Busy_us</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hw_delay.o(i.HWdelay_Wait_For_Serial_Interface_Busy_us))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HWradio_ProgNow_xinc
</UL>

<P><STRONG><a name="[111]"></a>HWdelay_Wait_For_Serial_Interface_Idle</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, hw_delay.o(i.HWdelay_Wait_For_Serial_Interface_Idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HWdelay_Wait_For_Serial_Interface_Idle
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HWradio_ProgNow_xinc
</UL>

<P><STRONG><a name="[9a]"></a>HWdelay_Wait_For_us</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hw_delay.o(i.HWdelay_Wait_For_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HWdelay_Wait_For_us
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
</UL>

<P><STRONG><a name="[a2]"></a>HWradio_DisableAllSpiWrites</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hw_radio.o(i.HWradio_DisableAllSpiWrites))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_Service
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtest_Ctrl_Handle_Test_Mode_Event
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Close_Connection_Event
</UL>

<P><STRONG><a name="[b5]"></a>HWradio_LE_Read_RSSI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hw_radio.o(i.HWradio_LE_Read_RSSI))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_Connection_Event
</UL>

<P><STRONG><a name="[9b]"></a>HWradio_LE_RxComplete</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hw_radio.o(i.HWradio_LE_RxComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HWradio_LE_RxComplete
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWhab_Set_Rx_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEtest_Test_Event_Complete
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Advertising_Event_Complete
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Advertising_Event_Begin
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Close_Connection_Event
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_Connection_Event
</UL>

<P><STRONG><a name="[9d]"></a>HWradio_LE_Service</STRONG> (Thumb, 880 bytes, Stack size 40 bytes, hw_radio.o(i.HWradio_LE_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HWradio_LE_Service &rArr; SER_WRITE &rArr; _HWradio_ProgNow_xinc &rArr; HWdelay_Wait_For_Serial_Interface_Idle
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_DisableAllSpiWrites
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HWradio_SetGios_Standby
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HWradio_SetGios_LE_TIFS_TxRx
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HWradio_SetGios_FullRx
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWhab_Set_Rx_Mode
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEtest_Test_Event_Complete
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Advertising_Event_Complete
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Prep_For_LE_Scan_Resp_Tx
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Prep_For_LE_Advert_Tx
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Close_Connection_Event
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_Connection_Event
</UL>

<P><STRONG><a name="[ea]"></a>HWradio_LE_Set_Active_Mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hw_radio.o(i.HWradio_LE_Set_Active_Mode))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Handle_Connection_Event
</UL>

<P><STRONG><a name="[ac]"></a>HWradio_LE_Setup_Radio_For_Next_TXRX</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hw_radio.o(i.HWradio_LE_Setup_Radio_For_Next_TXRX))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Advertising_Event_Begin
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_Connection_Event
</UL>

<P><STRONG><a name="[b4]"></a>HWradio_LE_TxComplete</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, hw_radio.o(i.HWradio_LE_TxComplete))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_Connection_Event
</UL>

<P><STRONG><a name="[109]"></a>IO_Read</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bsp_gpio.o(i.IO_Read))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CV663
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ff]"></a>LC_Sleep</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lc_interface.o(i.LC_Sleep))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Sleep
</UL>

<P><STRONG><a name="[87]"></a>LED1</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, led.o(i.LED1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED1
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_low
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_high
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CV663_Read_Card
</UL>

<P><STRONG><a name="[a4]"></a>LE_Connection_Extact_Connection_Req_Parameters</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, le_connection.o(i.LE_Connection_Extact_Connection_Req_Parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LE_Connection_Extact_Connection_Req_Parameters
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Get_Uint32
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Get_Uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEll_Decode_Advertising_ChannelPDU
</UL>

<P><STRONG><a name="[2a]"></a>LE_LL_Connection_Update_Req</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, le_link_layer.o(i.LE_LL_Connection_Update_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = LE_LL_Connection_Update_Req &rArr; _LEconnection_Close_Connection_Event &rArr; LEconnection_Connection_Update &rArr; LEeventgen_Generate_LE_Meta_Event &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Local_Disconnect
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Get_Uint16
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Close_Connection_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> le_link_layer.o(.data)
</UL>
<P><STRONG><a name="[aa]"></a>LE_LL_Ctrl_Handle_Connection_Event</STRONG> (Thumb, 848 bytes, Stack size 32 bytes, le_connection.o(i.LE_LL_Ctrl_Handle_Connection_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = LE_LL_Ctrl_Handle_Connection_Event &rArr; _LEconnection_Close_Connection_Event &rArr; LEconnection_Connection_Update &rArr; LEeventgen_Generate_LE_Meta_Event &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_TxComplete
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_Setup_Radio_For_Next_TXRX
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_Service
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_RxComplete
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_Read_RSSI
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Update_Next_Slave_Connection_Event_Time
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_set_rx_mode
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_rx_mode
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_Disable_All_Tim_Intr_Except
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Find_Link_Entry
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Is_Queue_Empty
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Encode_DataPDU
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Decode_DataPDU
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Close_Connection_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_LE_IRQ
</UL>

<P><STRONG><a name="[b6]"></a>LE_LL_Ctrl_Handle_LE_IRQ</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, le_link_layer.o(i.LE_LL_Ctrl_Handle_LE_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = LE_LL_Ctrl_Handle_LE_IRQ &rArr; LE_LL_Ctrl_Handle_Connection_Event &rArr; _LEconnection_Close_Connection_Event &rArr; LEconnection_Connection_Update &rArr; LEeventgen_Generate_LE_Meta_Event &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Bt_Clk_Avoid_Race
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired_For_Time
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtest_Test_Event_Begin
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtest_Ctrl_Handle_Test_Mode_Event
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Is_Next_Adv_Due
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Advertising_Event_Begin
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Handle_Connection_Event
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_Connection_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_IRQ_Handler
</UL>

<P><STRONG><a name="[2d]"></a>LE_LL_Enc_Req</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, le_link_layer.o(i.LE_LL_Enc_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = LE_LL_Enc_Req &rArr; LEllc_Encode_PDU &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Ticks
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconfig_Is_Features_Encryption_Supported
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Get_Rand_128_Ex
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Get_Uint16
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEllc_Encode_PDU
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEeventgen_Generate_LE_Meta_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> le_link_layer.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>LE_LL_Feature_Req</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, le_link_layer.o(i.LE_LL_Feature_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = LE_LL_Feature_Req &rArr; LEllc_Encode_PDU &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEllc_Encode_PDU
</UL>
<BR>[Address Reference Count : 1]<UL><LI> le_link_layer.o(.data)
</UL>
<P><STRONG><a name="[c3]"></a>LE_LL_Handle_LLC_Ack</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, le_link_layer.o(i.LE_LL_Handle_LLC_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LE_LL_Handle_LLC_Ack &rArr; LEconnection_Local_Disconnect &rArr; HCfc_Release_All_Data_Queue_Packets &rArr; BTq_Reset &rArr; BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks &rArr; BTq_Reduce_Queue_Number_Of_Processed_Chunks
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Local_Disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Decode_DataPDU
</UL>

<P><STRONG><a name="[c4]"></a>LE_LL_InactiveSlots</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, le_link_layer.o(i.LE_LL_InactiveSlots))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LE_LL_InactiveSlots &rArr; HW_Get_Native_Clk_Avoid_Race &rArr; HWdelay_Wait_For_us
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Get_Slots_To_Next_Advertising_Timer
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Sleep
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Sleep
</UL>

<P><STRONG><a name="[32]"></a>LE_LL_Pause_Enc_Req</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, le_link_layer.o(i.LE_LL_Pause_Enc_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = LE_LL_Pause_Enc_Req &rArr; LEllc_Encode_PDU &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Ticks
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconfig_Is_Features_Encryption_Supported
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEllc_Encode_PDU
</UL>
<BR>[Address Reference Count : 1]<UL><LI> le_link_layer.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>LE_LL_Pause_Enc_Rsp</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, le_link_layer.o(i.LE_LL_Pause_Enc_Rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = LE_LL_Pause_Enc_Rsp &rArr; LEllc_Encode_PDU &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Ticks
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEllc_Encode_PDU
</UL>
<BR>[Address Reference Count : 1]<UL><LI> le_link_layer.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>LE_LL_Reject_Ind</STRONG> (Thumb, 166 bytes, Stack size 64 bytes, le_link_layer.o(i.LE_LL_Reject_Ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LE_LL_Reject_Ind &rArr; LEeventgen_Generate_LE_Meta_Event &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEeventgen_Generate_LE_Meta_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> le_link_layer.o(.data)
</UL>
<P><STRONG><a name="[db]"></a>LE_LL_Set_Adv_Header</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, le_link_layer.o(i.LE_LL_Set_Adv_Header))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LE_LL_Set_Adv_Header
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Set_Adv_Header
</UL>

<P><STRONG><a name="[c6]"></a>LE_LL_Sleep</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, le_link_layer.o(i.LE_LL_Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LE_LL_Sleep &rArr; LMpol_Sleep &rArr; LE_LL_InactiveSlots &rArr; HW_Get_Native_Clk_Avoid_Race &rArr; HWdelay_Wait_For_us
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMpol_Sleep
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_InactiveSlots
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Advertising_Event_Complete
</UL>

<P><STRONG><a name="[2f]"></a>LE_LL_Start_Enc_Rsp</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, le_link_layer.o(i.LE_LL_Start_Enc_Rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = LE_LL_Start_Enc_Rsp &rArr; LEllc_Encode_PDU &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEllc_Encode_PDU
</UL>
<BR>[Address Reference Count : 1]<UL><LI> le_link_layer.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>LE_LL_Terminate_Ind</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, le_link_layer.o(i.LE_LL_Terminate_Ind))
<BR>[Address Reference Count : 1]<UL><LI> le_link_layer.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>LE_LL_UnSupported_Pdu</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, le_link_layer.o(i.LE_LL_UnSupported_Pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = LE_LL_UnSupported_Pdu &rArr; LEllc_Encode_PDU &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEllc_Encode_PDU
</UL>
<BR>[Address Reference Count : 1]<UL><LI> le_link_layer.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>LE_LL_Unknown_Rsp</STRONG> (Thumb, 188 bytes, Stack size 64 bytes, le_link_layer.o(i.LE_LL_Unknown_Rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LE_LL_Unknown_Rsp &rArr; LEeventgen_Generate_LE_Meta_Event &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEeventgen_Generate_LE_Meta_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> le_link_layer.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>LE_LL_Version_Ind</STRONG> (Thumb, 170 bytes, Stack size 80 bytes, le_link_layer.o(i.LE_LL_Version_Ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = LE_LL_Version_Ind &rArr; LEllc_Encode_PDU &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Ticks
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Get_Uint16
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEllc_Encode_PDU
</UL>
<BR>[Address Reference Count : 1]<UL><LI> le_link_layer.o(.data)
</UL>
<P><STRONG><a name="[bb]"></a>LEadv_Advertising_Event_Begin</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, le_advertise.o(i.LEadv_Advertising_Event_Begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LEadv_Advertising_Event_Begin &rArr; LEadv_Prep_For_LE_Advert_Tx &rArr; HWradio_LE_Service &rArr; SER_WRITE &rArr; _HWradio_ProgNow_xinc &rArr; HWdelay_Wait_For_Serial_Interface_Idle
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_Setup_Radio_For_Next_TXRX
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_RxComplete
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_Disable_All_Tim_Intr_Except
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Reset_Adv_Frequency
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Prep_For_LE_Advert_Tx
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_memcpy32
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Set_Next_Advertising_Event_Start_Timer
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_slave
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_rx_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_LE_IRQ
</UL>

<P><STRONG><a name="[ef]"></a>LEadv_Disable_Connectable_Advertising</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, le_advertise.o(i.LEadv_Disable_Connectable_Advertising))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEll_Decode_Advertising_ChannelPDU
</UL>

<P><STRONG><a name="[f0]"></a>LEadv_Encode_Own_Address_In_Payload</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, le_advertise.o(i.LEadv_Encode_Own_Address_In_Payload))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEll_Encode_Advertising_ChannelPDU
</UL>

<P><STRONG><a name="[eb]"></a>LEadv_Get_Direct_Adv_Address</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, le_advertise.o(i.LEadv_Get_Direct_Adv_Address))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEeventgen_Generate_LE_Meta_Event
</UL>

<P><STRONG><a name="[ec]"></a>LEadv_Get_Direct_Adv_Type</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, le_advertise.o(i.LEadv_Get_Direct_Adv_Type))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEeventgen_Generate_LE_Meta_Event
</UL>

<P><STRONG><a name="[c5]"></a>LEadv_Get_Slots_To_Next_Advertising_Timer</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, le_advertise.o(i.LEadv_Get_Slots_To_Next_Advertising_Timer))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_InactiveSlots
</UL>

<P><STRONG><a name="[be]"></a>LEadv_Handle_Advertising</STRONG> (Thumb, 526 bytes, Stack size 32 bytes, le_advertise.o(i.LEadv_Handle_Advertising))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LEadv_Handle_Advertising &rArr; _LEadv_Advertising_Event_Complete &rArr; LEeventgen_Generate_LE_Meta_Event &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_Service
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_RxComplete
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_DisableAllSpiWrites
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_Disable_All_Tim_Intr_Except
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Find_Link_Entry
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEfreq_Update_Channel_Remapping_Table
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Advertising_Event_Complete
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Advance_For_Next_Adv_Tx
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Try_Advance_Adv_Frequency
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Prep_For_LE_Scan_Resp_Tx
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Prep_For_LE_Advert_Tx
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_memcpy32
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_clear_tx_enable
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_clear_le_spi_only
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_abort_tifs_count
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_slave
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_rx_mode
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEll_Encode_Advertising_ChannelPDU
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEll_Decode_Advertising_ChannelPDU
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEfreq_Map_Channel_Index_2_RF_Freq
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Setup_First_Connection_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_LE_IRQ
</UL>

<P><STRONG><a name="[ba]"></a>LEadv_Is_Next_Adv_Due</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, le_advertise.o(i.LEadv_Is_Next_Adv_Due))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEadv_Is_Next_Adv_Due
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired_For_Time
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_LE_IRQ
</UL>

<P><STRONG><a name="[cc]"></a>LEadv_Prep_For_LE_Advert_Tx</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, le_advertise.o(i.LEadv_Prep_For_LE_Advert_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LEadv_Prep_For_LE_Advert_Tx &rArr; HWradio_LE_Service &rArr; SER_WRITE &rArr; _HWradio_ProgNow_xinc &rArr; HWdelay_Wait_For_Serial_Interface_Idle
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_Service
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_rx_mode
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEll_Encode_Advertising_ChannelPDU
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEfreq_Map_Channel_Index_2_RF_Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Advertising_Event_Complete
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Advertising_Event_Begin
</UL>

<P><STRONG><a name="[d3]"></a>LEadv_Prep_For_LE_Scan_Resp_Tx</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, le_advertise.o(i.LEadv_Prep_For_LE_Scan_Resp_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LEadv_Prep_For_LE_Scan_Resp_Tx &rArr; HWradio_LE_Service &rArr; SER_WRITE &rArr; _HWradio_ProgNow_xinc &rArr; HWdelay_Wait_For_Serial_Interface_Idle
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_Service
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_rx_mode
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEfreq_Map_Channel_Index_2_RF_Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
</UL>

<P><STRONG><a name="[cb]"></a>LEadv_Reset_Adv_Frequency</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, le_advertise.o(i.LEadv_Reset_Adv_Frequency))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Advertising_Event_Complete
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Advertising_Event_Begin
</UL>

<P><STRONG><a name="[da]"></a>LEadv_Set_Adv_Header</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, le_advertise.o(i.LEadv_Set_Adv_Header))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LEadv_Set_Adv_Header &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Set_Adv_Header
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEll_Encode_Advertising_ChannelPDU
</UL>

<P><STRONG><a name="[dc]"></a>LEadv_Set_Advertise_Enable</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, le_advertise.o(i.LEadv_Set_Advertise_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LEadv_Set_Advertise_Enable &rArr; _LEadv_Set_Next_Advertising_Event_Start_Timer &rArr; HW_Get_Native_Clk_Avoid_Race &rArr; HWdelay_Wait_For_us
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Ticks
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Set_Next_Advertising_Event_Start_Timer
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Close_Connection_Event
</UL>

<P><STRONG><a name="[cf]"></a>LEadv_Try_Advance_Adv_Frequency</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, le_advertise.o(i.LEadv_Try_Advance_Adv_Frequency))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
</UL>

<P><STRONG><a name="[f1]"></a>LEadv_Write_Adv_Data</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, le_advertise.o(i.LEadv_Write_Adv_Data))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEll_Encode_Advertising_ChannelPDU
</UL>

<P><STRONG><a name="[f3]"></a>LEadv_Write_Scan_Resp_Data</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, le_advertise.o(i.LEadv_Write_Scan_Resp_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LEadv_Write_Scan_Resp_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEll_Encode_Advertising_ChannelPDU
</UL>

<P><STRONG><a name="[ee]"></a>LEconfig_Allocate_Link_Id</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, le_config.o(i.LEconfig_Allocate_Link_Id))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LEconfig_Allocate_Link_Id
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEll_Decode_Advertising_ChannelPDU
</UL>

<P><STRONG><a name="[117]"></a>LEconfig_Free_Link_Id</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, le_config.o(i.LEconfig_Free_Link_Id))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Free_Connection
</UL>

<P><STRONG><a name="[f6]"></a>LEconfig_Get_LE_Features_Ref</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, le_config.o(i.LEconfig_Get_LE_Features_Ref))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEllc_Encode_PDU
</UL>

<P><STRONG><a name="[bf]"></a>LEconfig_Is_Features_Encryption_Supported</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, le_config.o(i.LEconfig_Is_Features_Encryption_Supported))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Pause_Enc_Req
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Enc_Req
</UL>

<P><STRONG><a name="[dd]"></a>LEconnection_Connection_Update</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, le_connection.o(i.LEconnection_Connection_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LEconnection_Connection_Update &rArr; LEeventgen_Generate_LE_Meta_Event &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEeventgen_Generate_LE_Meta_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Close_Connection_Event
</UL>

<P><STRONG><a name="[de]"></a>LEconnection_Encrypt_Payload</STRONG> (Thumb, 322 bytes, Stack size 104 bytes, le_connection.o(i.LEconnection_Encrypt_Payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LEconnection_Encrypt_Payload &rArr; hw_memcpy32
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Interrupts_Restore_Flags
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Disable_Interrupts_Save_Flags
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_memcpy32
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_set_aes_pkt_length
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_set_aes_mode
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_set_aes_llid
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Set_HW_Pkt_Counter
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEllc_Encode_PDU
</UL>

<P><STRONG><a name="[ab]"></a>LEconnection_Find_Link_Entry</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, le_connection.o(i.LEconnection_Find_Link_Entry))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEll_Decode_Advertising_ChannelPDU
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Handle_Connection_Event
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_Connection_Event
</UL>

<P><STRONG><a name="[e5]"></a>LEconnection_Find_Next_Connection_Event</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, le_connection.o(i.LEconnection_Find_Next_Connection_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LEconnection_Find_Next_Connection_Event
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnections_Link_In_Use
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Close_Connection_Event
</UL>

<P><STRONG><a name="[b9]"></a>LEconnection_Handle_Connection_Event</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, le_connection.o(i.LEconnection_Handle_Connection_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LEconnection_Handle_Connection_Event &rArr; LEfreq_Get_Next_Data_Channel_Frequency
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_Set_Active_Mode
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_set_rx_mode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_abort_tifs_count
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_slave
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_Disable_All_Tim_Intr_Except
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Find_Link_Entry
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired_For_Time
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEfreq_Map_Channel_Index_2_RF_Freq
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEfreq_Get_Next_Data_Channel_Frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_LE_IRQ
</UL>

<P><STRONG><a name="[a8]"></a>LEconnection_Local_Disconnect</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, le_connection.o(i.LEconnection_Local_Disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LEconnection_Local_Disconnect &rArr; HCfc_Release_All_Data_Queue_Packets &rArr; BTq_Reset &rArr; BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks &rArr; BTq_Reduce_Queue_Number_Of_Processed_Chunks
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Release_All_Data_Queue_Packets
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEfreq_Update_Channel_Map_Req
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Connection_Update_Req
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Handle_LLC_Ack
</UL>

<P><STRONG><a name="[e2]"></a>LEconnection_Set_HW_Pkt_Counter</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, le_connection.o(i.LEconnection_Set_HW_Pkt_Counter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEconnection_Set_HW_Pkt_Counter
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Encrypt_Payload
</UL>

<P><STRONG><a name="[d5]"></a>LEconnection_Setup_First_Connection_Event</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, le_connection.o(i.LEconnection_Setup_First_Connection_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LEconnection_Setup_First_Connection_Event &rArr; HW_Get_Native_Clk_Avoid_Race &rArr; HWdelay_Wait_For_us
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
</UL>

<P><STRONG><a name="[e6]"></a>LEconnections_Link_In_Use</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, le_config.o(i.LEconnections_Link_In_Use))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Find_Next_Connection_Event
</UL>

<P><STRONG><a name="[c2]"></a>LEeventgen_Generate_LE_Meta_Event</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, le_connection.o(i.LEeventgen_Generate_LE_Meta_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LEeventgen_Generate_LE_Meta_Event &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Is_Event_Masked_On
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Get_Direct_Adv_Type
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Get_Direct_Adv_Address
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Advertising_Event_Complete
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Unknown_Rsp
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Reject_Ind
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Enc_Req
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Connection_Update
</UL>

<P><STRONG><a name="[e7]"></a>LEfreq_Get_Next_Data_Channel_Frequency</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, le_frequency.o(i.LEfreq_Get_Next_Data_Channel_Frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEfreq_Get_Next_Data_Channel_Frequency
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Handle_Connection_Event
</UL>

<P><STRONG><a name="[ce]"></a>LEfreq_Map_Channel_Index_2_RF_Freq</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, le_frequency.o(i.LEfreq_Map_Channel_Index_2_RF_Freq))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Prep_For_LE_Scan_Resp_Tx
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Prep_For_LE_Advert_Tx
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Handle_Connection_Event
</UL>

<P><STRONG><a name="[ed]"></a>LEfreq_Update_Channel_Map</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, le_frequency.o(i.LEfreq_Update_Channel_Map))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LEfreq_Update_Channel_Map &rArr; LEfreq_Update_Channel_Remapping_Table
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEfreq_Update_Channel_Remapping_Table
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Close_Connection_Event
</UL>

<P><STRONG><a name="[2b]"></a>LEfreq_Update_Channel_Map_Req</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, le_frequency.o(i.LEfreq_Update_Channel_Map_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LEfreq_Update_Channel_Map_Req &rArr; LEconnection_Local_Disconnect &rArr; HCfc_Release_All_Data_Queue_Packets &rArr; BTq_Reset &rArr; BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks &rArr; BTq_Reduce_Queue_Number_Of_Processed_Chunks
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Local_Disconnect
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Get_Uint16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> le_link_layer.o(.data)
</UL>
<P><STRONG><a name="[d6]"></a>LEfreq_Update_Channel_Remapping_Table</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, le_frequency.o(i.LEfreq_Update_Channel_Remapping_Table))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LEfreq_Update_Channel_Remapping_Table
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEfreq_Update_Channel_Map
</UL>

<P><STRONG><a name="[d2]"></a>LEll_Decode_Advertising_ChannelPDU</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, le_link_layer.o(i.LEll_Decode_Advertising_ChannelPDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LEll_Decode_Advertising_ChannelPDU &rArr; LEconfig_Allocate_Link_Id
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconfig_Allocate_Link_Id
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Find_Link_Entry
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Disable_Connectable_Advertising
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_Connection_Extact_Connection_Req_Parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
</UL>

<P><STRONG><a name="[d9]"></a>LEll_Encode_Advertising_ChannelPDU</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, le_link_layer.o(i.LEll_Encode_Advertising_ChannelPDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LEll_Encode_Advertising_ChannelPDU &rArr; LEadv_Write_Scan_Resp_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Write_Scan_Resp_Data
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Write_Adv_Data
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Set_Adv_Header
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Encode_Own_Address_In_Payload
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_memcpy32
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Prep_For_LE_Advert_Tx
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
</UL>

<P><STRONG><a name="[c0]"></a>LEllc_Encode_PDU</STRONG> (Thumb, 382 bytes, Stack size 104 bytes, le_connection.o(i.LEllc_Encode_PDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = LEllc_Encode_PDU &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Array_Copy
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconfig_Get_LE_Features_Ref
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Hardware_Error_Event
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Set_Uint16
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Encrypt_Payload
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Version_Ind
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_UnSupported_Pdu
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Start_Enc_Rsp
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Pause_Enc_Rsp
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Pause_Enc_Req
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Feature_Req
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Enc_Req
</UL>

<P><STRONG><a name="[bd]"></a>LEtest_Ctrl_Handle_Test_Mode_Event</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, le_test.o(i.LEtest_Ctrl_Handle_Test_Mode_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LEtest_Ctrl_Handle_Test_Mode_Event &rArr; _LEtest_Test_Event_Complete &rArr; HWradio_LE_Service &rArr; SER_WRITE &rArr; _HWradio_ProgNow_xinc &rArr; HWdelay_Wait_For_Serial_Interface_Idle
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_DisableAllSpiWrites
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEtest_Test_Event_Complete
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEtest_Prep_For_LE_Test_Tx
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEtest_Prep_For_LE_Test_Rx
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEtest_Packet_Send_Complete
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_clear_tx_enable
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_slave
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_rx_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_LE_IRQ
</UL>

<P><STRONG><a name="[bc]"></a>LEtest_Test_Event_Begin</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, le_test.o(i.LEtest_Test_Event_Begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LEtest_Test_Event_Begin &rArr; _LEtest_Set_Test_Mode_Header
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEtest_Set_Test_Mode_Header
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_clear_tx_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_LE_IRQ
</UL>

<P><STRONG><a name="[c7]"></a>LMpol_Sleep</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lmp_link_policy.o(i.LMpol_Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LMpol_Sleep &rArr; LE_LL_InactiveSlots &rArr; HW_Get_Native_Clk_Avoid_Race &rArr; HWdelay_Wait_For_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Sleep
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_InactiveSlots
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Sleep
</UL>

<P><STRONG><a name="[f4]"></a>LMutils_Array_Copy</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lmp_utils.o(i.LMutils_Array_Copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LMutils_Array_Copy
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEllc_Encode_PDU
</UL>

<P><STRONG><a name="[a6]"></a>LMutils_Get_Uint16</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lmp_utils.o(i.LMutils_Get_Uint16))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEfreq_Update_Channel_Map_Req
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Version_Ind
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Enc_Req
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Connection_Update_Req
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_Connection_Extact_Connection_Req_Parameters
</UL>

<P><STRONG><a name="[a5]"></a>LMutils_Get_Uint32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lmp_utils.o(i.LMutils_Get_Uint32))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_Connection_Extact_Connection_Req_Parameters
</UL>

<P><STRONG><a name="[f5]"></a>LMutils_Set_Uint16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lmp_utils.o(i.LMutils_Set_Uint16))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEllc_Encode_PDU
</UL>

<P><STRONG><a name="[ae]"></a>LSLCirq_Disable_All_Tim_Intr_Except</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lslc_irq.o(i.LSLCirq_Disable_All_Tim_Intr_Except))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Advertising_Event_Complete
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Advance_For_Next_Adv_Tx
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Advertising_Event_Begin
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Close_Connection_Event
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Handle_Connection_Event
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_Connection_Event
</UL>

<P><STRONG><a name="[67]"></a>LSLCirq_IRQ_Handler</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, lslc_irq.o(i.LSLCirq_IRQ_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = LSLCirq_IRQ_Handler &rArr; LE_LL_Ctrl_Handle_LE_IRQ &rArr; LE_LL_Ctrl_Handle_Connection_Event &rArr; _LEconnection_Close_Connection_Event &rArr; LEconnection_Connection_Update &rArr; LEeventgen_Generate_LE_Meta_Event &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_AUX_TIM
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_LE_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Handler
</UL>

<P><STRONG><a name="[100]"></a>LSLCslot_Handle_AUX_TIM</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lslc_slot.o(i.LSLCslot_Handle_AUX_TIM))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_IRQ_Handler
</UL>

<P><STRONG><a name="[101]"></a>PcdAntenna_CV663</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cv663.o(i.PcdAntenna_CV663))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PcdAntenna_CV663 &rArr; Read_CV663
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_CV663
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CV663
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccReset
</UL>

<P><STRONG><a name="[83]"></a>PcdConfig_CV663</STRONG> (Thumb, 432 bytes, Stack size 8 bytes, cv663.o(i.PcdConfig_CV663))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PcdConfig_CV663 &rArr; phhalHw_CV663_Cmd_LoadProtocol &rArr; PcdTransceive_CV663 &rArr; Delay_us &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_CV663_Cmd_LoadProtocol
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_CV663
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccRequest
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CV663_Init
</UL>

<P><STRONG><a name="[89]"></a>PcdRc663_Cmd_Lpcd</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, cv663.o(i.PcdRc663_Cmd_Lpcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PcdRc663_Cmd_Lpcd &rArr; SetBitMask_CV663 &rArr; Read_CV663
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_CV663
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask_CV663
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CV663
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CV663_Read_Card
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104]"></a>PcdRc663_Lpcd_GetCfg</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, cv663.o(i.PcdRc663_Lpcd_GetCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = PcdRc663_Lpcd_GetCfg &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_CV663
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask_CV663
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CV663
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>PcdReset_CV663</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, cv663.o(i.PcdReset_CV663))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PcdReset_CV663 &rArr; Read_CV663
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_low
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_high
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CV663
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CV663_Init
</UL>

<P><STRONG><a name="[105]"></a>PcdSetTmo_CV663</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, cv663.o(i.PcdSetTmo_CV663))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PcdSetTmo_CV663 &rArr; Write_CV663
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_CV663
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccSelect
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccAnticoll
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccRequest
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccRead
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccAuthState
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_CV663_Cmd_LoadProtocol
</UL>

<P><STRONG><a name="[106]"></a>PcdTransceive_CV663</STRONG> (Thumb, 418 bytes, Stack size 48 bytes, cv663.o(i.PcdTransceive_CV663))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = PcdTransceive_CV663 &rArr; Delay_us &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_CV663
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask_CV663
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CV663
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccSelect
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccAnticoll
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccRequest
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccRead
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccAuthState
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_CV663_Cmd_LoadProtocol
</UL>

<P><STRONG><a name="[107]"></a>PiccAnticoll</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, iso14443.o(i.PiccAnticoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = PiccAnticoll &rArr; PcdTransceive_CV663 &rArr; Delay_us &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_CV663
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdTransceive_CV663
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo_CV663
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccAnticollSelect
</UL>

<P><STRONG><a name="[88]"></a>PiccAnticollSelect</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, iso14443.o(i.PiccAnticollSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = PiccAnticollSelect &rArr; PiccSelect &rArr; PcdTransceive_CV663 &rArr; Delay_us &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccSelect
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccAnticoll
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CV663_Read_Card
</UL>

<P><STRONG><a name="[8a]"></a>PiccAuthState</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, iso14443.o(i.PiccAuthState))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = PiccAuthState &rArr; PcdTransceive_CV663 &rArr; Delay_us &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CV663
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdTransceive_CV663
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo_CV663
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CV663_Read_Card
</UL>

<P><STRONG><a name="[8b]"></a>PiccRead</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, iso14443.o(i.PiccRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = PiccRead &rArr; PcdTransceive_CV663 &rArr; Delay_us &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_CV663
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdTransceive_CV663
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo_CV663
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CV663_Read_Card
</UL>

<P><STRONG><a name="[86]"></a>PiccRequest</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, iso14443.o(i.PiccRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = PiccRequest &rArr; PcdConfig_CV663 &rArr; phhalHw_CV663_Cmd_LoadProtocol &rArr; PcdTransceive_CV663 &rArr; Delay_us &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_CV663
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask_CV663
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdTransceive_CV663
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo_CV663
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdConfig_CV663
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask_CV663
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CV663_Read_Card
</UL>

<P><STRONG><a name="[85]"></a>PiccReset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, iso14443.o(i.PiccReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PiccReset &rArr; PcdAntenna_CV663 &rArr; Read_CV663
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntenna_CV663
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CV663_Read_Card
</UL>

<P><STRONG><a name="[108]"></a>PiccSelect</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, iso14443.o(i.PiccSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PiccSelect &rArr; PcdTransceive_CV663 &rArr; Delay_us &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_CV663
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdTransceive_CV663
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo_CV663
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccAnticollSelect
</UL>

<P><STRONG><a name="[91]"></a>Read_CV663</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, cv663.o(i.Read_CV663))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Read_CV663
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_low
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_high
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccAuthState
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask_CV663
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdTransceive_CV663
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReset_CV663
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntenna_CV663
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask_CV663
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRc663_Lpcd_GetCfg
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRc663_Cmd_Lpcd
</UL>

<P><STRONG><a name="[a1]"></a>SER_WRITE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hw_radio.o(i.SER_WRITE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SER_WRITE &rArr; _HWradio_ProgNow_xinc &rArr; HWdelay_Wait_For_Serial_Interface_Idle
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HWradio_ProgNow_xinc
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_Service
</UL>

<P><STRONG><a name="[10b]"></a>SLED_Init</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, led.o(i.SLED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SLED_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_low
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_high
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_direction_output
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_fun_sel
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>SYSirq_Disable_Interrupts_Save_Flags</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sys_irq.o(i.SYSirq_Disable_Interrupts_Save_Flags))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Reduce_Queue_Number_Of_Processed_Chunks
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_LE_Dequeue_Next
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSatomic_Increment_u_int8
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Ack_Last_Dequeued
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Encrypt_Payload
</UL>

<P><STRONG><a name="[6d]"></a>SYSirq_Interrupts_Restore_Flags</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_irq.o(i.SYSirq_Interrupts_Restore_Flags))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Reduce_Queue_Number_Of_Processed_Chunks
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_LE_Dequeue_Next
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSatomic_Increment_u_int8
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Ack_Last_Dequeued
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Encrypt_Payload
</UL>

<P><STRONG><a name="[10d]"></a>SYSrand_Get_Rand</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, sys_rand_num_gen.o(i.SYSrand_Get_Rand))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SYSrand_Get_Rand &rArr; SYSrand_Get_Rand_R
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Get_Rand_R
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Get_Rand_128_Ex
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Set_Next_Advertising_Event_Start_Timer
</UL>

<P><STRONG><a name="[c1]"></a>SYSrand_Get_Rand_128_Ex</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, sys_rand_num_gen.o(i.SYSrand_Get_Rand_128_Ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SYSrand_Get_Rand_128_Ex &rArr; SYSrand_Get_Rand &rArr; SYSrand_Get_Rand_R
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Get_Rand
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Enc_Req
</UL>

<P><STRONG><a name="[10e]"></a>SYSrand_Get_Rand_R</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sys_rand_num_gen.o(i.SYSrand_Get_Rand_R))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSrand_Get_Rand_R
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Get_Rand
</UL>

<P><STRONG><a name="[103]"></a>SetBitMask_CV663</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cv663.o(i.SetBitMask_CV663))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetBitMask_CV663 &rArr; Read_CV663
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_CV663
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CV663
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccRequest
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdTransceive_CV663
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRc663_Lpcd_GetCfg
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRc663_Cmd_Lpcd
</UL>

<P><STRONG><a name="[10]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_systick.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_tick_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SystemInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, system_xinc.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retarget_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(.text)
</UL>
<P><STRONG><a name="[1c]"></a>UART0_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bsp_uart.o(i.UART0_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>UART1_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bsp_uart.o(i.UART1_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>Write_CV663</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, cv663.o(i.Write_CV663))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Write_CV663
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_low
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_high
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccSelect
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccAnticoll
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccRequest
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccRead
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask_CV663
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdTransceive_CV663
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo_CV663
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdConfig_CV663
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntenna_CV663
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask_CV663
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRc663_Lpcd_GetCfg
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRc663_Cmd_Lpcd
</UL>

<P><STRONG><a name="[71]"></a>_BTq_Allocate_Header</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tra_queue.o(i._BTq_Allocate_Header))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
</UL>

<P><STRONG><a name="[6c]"></a>_BTq_Deallocate_Header</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tra_queue.o(i._BTq_Deallocate_Header))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Reset
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Ack_Last_Dequeued
</UL>

<P><STRONG><a name="[69]"></a>_BTq_Get_Data_Queue_Ref</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tra_queue.o(i._BTq_Get_Data_Queue_Ref))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Reduce_Queue_Number_Of_Processed_Chunks
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Ack_Last_Dequeued
</UL>

<P><STRONG><a name="[10a]"></a>_HWradio_ProgNow_xinc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hw_radio.o(i._HWradio_ProgNow_xinc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _HWradio_ProgNow_xinc &rArr; HWdelay_Wait_For_Serial_Interface_Idle
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Wait_For_Serial_Interface_Idle
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Wait_For_Serial_Interface_Busy_us
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_WRITE
</UL>

<P><STRONG><a name="[96]"></a>_Insert_Uint16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hc_event_gen.o(i._Insert_Uint16))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEeventgen_Generate_LE_Meta_Event
</UL>

<P><STRONG><a name="[d8]"></a>_LEadv_Advance_For_Next_Adv_Tx</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, le_advertise.o(i._LEadv_Advance_For_Next_Adv_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _LEadv_Advance_For_Next_Adv_Tx
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_Disable_All_Tim_Intr_Except
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_rx_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
</UL>

<P><STRONG><a name="[d7]"></a>_LEadv_Advertising_Event_Complete</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, le_advertise.o(i._LEadv_Advertising_Event_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _LEadv_Advertising_Event_Complete &rArr; LEeventgen_Generate_LE_Meta_Event &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_Service
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_RxComplete
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_Disable_All_Tim_Intr_Except
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired_For_Time
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Reset_Adv_Frequency
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Prep_For_LE_Advert_Tx
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_clear_tx_enable
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_clear_le_spi_only
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_abort_tifs_count
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_rx_mode
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Sleep
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEeventgen_Generate_LE_Meta_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
</UL>

<P><STRONG><a name="[a9]"></a>_LEconnection_Close_Connection_Event</STRONG> (Thumb, 398 bytes, Stack size 88 bytes, le_connection.o(i._LEconnection_Close_Connection_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _LEconnection_Close_Connection_Event &rArr; LEconnection_Connection_Update &rArr; LEeventgen_Generate_LE_Meta_Event &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_Service
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_RxComplete
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_DisableAllSpiWrites
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_abort_tifs_count
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_slave
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_rx_mode
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Release_All_Data_Queue_Packets
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Set_Advertise_Enable
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_Disable_All_Tim_Intr_Except
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEfreq_Update_Channel_Map
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Reset_Connection
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Free_Connection
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Find_Next_Connection_Event
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Connection_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Connection_Update_Req
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_Connection_Event
</UL>

<P><STRONG><a name="[b2]"></a>_LEconnection_Decode_DataPDU</STRONG> (Thumb, 374 bytes, Stack size 40 bytes, le_connection.o(i._LEconnection_Decode_DataPDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _LEconnection_Decode_DataPDU &rArr; BTq_Ack_Last_Dequeued &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_memcpy32
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Ack_Last_Dequeued
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Handle_LLC_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_Connection_Event
</UL>

<P><STRONG><a name="[b3]"></a>_LEconnection_Encode_DataPDU</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, le_connection.o(i._LEconnection_Encode_DataPDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _LEconnection_Encode_DataPDU &rArr; BTq_LE_Dequeue_Next
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_memcpy32
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_set_tx_llid
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_set_tx_length_data
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_LE_Dequeue_Next
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_Connection_Event
</UL>

<P><STRONG><a name="[113]"></a>_LEconnection_Free_Connection</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, le_connection.o(i._LEconnection_Free_Connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _LEconnection_Free_Connection &rArr; _LEconnection_Reset_Connection &rArr; HCfc_Release_All_Data_Queue_Packets &rArr; BTq_Reset &rArr; BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks &rArr; BTq_Reduce_Queue_Number_Of_Processed_Chunks
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconfig_Free_Link_Id
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Reset_Connection
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Close_Connection_Event
</UL>

<P><STRONG><a name="[114]"></a>_LEconnection_Reset_Connection</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, le_connection.o(i._LEconnection_Reset_Connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _LEconnection_Reset_Connection &rArr; HCfc_Release_All_Data_Queue_Packets &rArr; BTq_Reset &rArr; BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks &rArr; BTq_Reduce_Queue_Number_Of_Processed_Chunks
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Release_All_Data_Queue_Packets
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Free_Connection
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Close_Connection_Event
</UL>

<P><STRONG><a name="[f8]"></a>_LEtest_Packet_Send_Complete</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, le_test.o(i._LEtest_Packet_Send_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _LEtest_Packet_Send_Complete
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_clear_tx_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtest_Ctrl_Handle_Test_Mode_Event
</UL>

<P><STRONG><a name="[fa]"></a>_LEtest_Prep_For_LE_Test_Rx</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, le_test.o(i._LEtest_Prep_For_LE_Test_Rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _LEtest_Prep_For_LE_Test_Rx
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_rx_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtest_Ctrl_Handle_Test_Mode_Event
</UL>

<P><STRONG><a name="[f9]"></a>_LEtest_Prep_For_LE_Test_Tx</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, le_test.o(i._LEtest_Prep_For_LE_Test_Tx))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtest_Ctrl_Handle_Test_Mode_Event
</UL>

<P><STRONG><a name="[fe]"></a>_LEtest_Set_Test_Mode_Header</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, le_test.o(i._LEtest_Set_Test_Mode_Header))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _LEtest_Set_Test_Mode_Header
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtest_Test_Event_Begin
</UL>

<P><STRONG><a name="[fb]"></a>_LEtest_Test_Event_Complete</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, le_test.o(i._LEtest_Test_Event_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _LEtest_Test_Event_Complete &rArr; HWradio_LE_Service &rArr; SER_WRITE &rArr; _HWradio_ProgNow_xinc &rArr; HWdelay_Wait_For_Serial_Interface_Idle
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_Service
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_RxComplete
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_clear_tx_enable
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_rx_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtest_Ctrl_Handle_Test_Mode_Event
</UL>

<P><STRONG><a name="[9e]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cv663.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdTransceive_CV663
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_Service
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Set_Adv_Header
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEll_Encode_Advertising_ChannelPDU
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEllc_Encode_PDU
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_Connection_Event
</UL>

<P><STRONG><a name="[54]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[4b]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_retarget.o(i._sys_exit))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[10f]"></a>ble_tick_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, btstack_tick.o(i.ble_tick_handler))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[62]"></a>ferror</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_retarget.o(i.ferror))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[27]"></a>fputc</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, bsp_retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[8f]"></a>gpio_direction_input</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, bsp_gpio.o(i.gpio_direction_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_direction_input
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CV663_SPI_Init
</UL>

<P><STRONG><a name="[8e]"></a>gpio_direction_output</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bsp_gpio.o(i.gpio_direction_output))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CV663_SPI_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLED_Init
</UL>

<P><STRONG><a name="[10c]"></a>gpio_fun_sel</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, bsp_gpio.o(i.gpio_fun_sel))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLED_Init
</UL>

<P><STRONG><a name="[8d]"></a>gpio_mux_ctl</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bsp_gpio.o(i.gpio_mux_ctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_mux_ctl
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CV663_SPI_Init
</UL>

<P><STRONG><a name="[7c]"></a>gpio_output_high</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bsp_gpio.o(i.gpio_output_high))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED1
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Beep
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_CV663
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CV663
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReset_CV663
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CV663_SPI_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLED_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CV663_Read_Card
</UL>

<P><STRONG><a name="[7e]"></a>gpio_output_low</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bsp_gpio.o(i.gpio_output_low))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED1
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Beep
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_CV663
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CV663
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReset_CV663
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CV663_SPI_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLED_Init
</UL>

<P><STRONG><a name="[37]"></a>hci_dump_enable_log_level</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hci_dump.o(i.hci_dump_enable_log_level), UNUSED, KEPT)

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = main &rArr; CV663_Read_Card &rArr; PiccRequest &rArr; PcdConfig_CV663 &rArr; phhalHw_CV663_Cmd_LoadProtocol &rArr; PcdTransceive_CV663 &rArr; Delay_us &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLED_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRc663_Lpcd_GetCfg
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRc663_Cmd_Lpcd
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Read
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_s
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CV663_Read_Card
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CV663_Init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[102]"></a>phhalHw_CV663_Cmd_LoadProtocol</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, cv663.o(i.phhalHw_CV663_Cmd_LoadProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = phhalHw_CV663_Cmd_LoadProtocol &rArr; PcdTransceive_CV663 &rArr; Delay_us &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdTransceive_CV663
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo_CV663
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdConfig_CV663
</UL>

<P><STRONG><a name="[110]"></a>retarget_init</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, bsp_retarget.o(i.retarget_init))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[118]"></a>sendchar</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_retarget.o(i.sendchar))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[9c]"></a>HWhab_Set_Rx_Mode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hw_radio.o(i.HWhab_Set_Rx_Mode))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_Service
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_RxComplete
</UL>

<P><STRONG><a name="[9f]"></a>_HWradio_SetGios_FullRx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hw_radio.o(i._HWradio_SetGios_FullRx))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_Service
</UL>

<P><STRONG><a name="[a0]"></a>_HWradio_SetGios_LE_TIFS_TxRx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hw_radio.o(i._HWradio_SetGios_LE_TIFS_TxRx))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_Service
</UL>

<P><STRONG><a name="[a3]"></a>_HWradio_SetGios_Standby</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hw_radio.o(i._HWradio_SetGios_Standby))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_Service
</UL>

<P><STRONG><a name="[29]"></a>dummy_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, btstack_tick.o(i.dummy_handler))
<BR>[Address Reference Count : 1]<UL><LI> btstack_tick.o(.data)
</UL>
<P><STRONG><a name="[72]"></a>SYSatomic_Increment_u_int8</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tra_queue.o(i.SYSatomic_Increment_u_int8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYSatomic_Increment_u_int8
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Interrupts_Restore_Flags
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Disable_Interrupts_Save_Flags
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
</UL>

<P><STRONG><a name="[78]"></a>_BTq_Initialise_Data_Queue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tra_queue.o(i._BTq_Initialise_Data_Queue))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Reset
</UL>

<P><STRONG><a name="[77]"></a>_BTq_Initialise_Variable_Chunk_Queue</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, tra_queue.o(i._BTq_Initialise_Variable_Chunk_Queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _BTq_Initialise_Variable_Chunk_Queue
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Reset
</UL>

<P><STRONG><a name="[af]"></a>HW_set_rx_mode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, le_connection.o(i.HW_set_rx_mode))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Close_Connection_Event
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_Connection_Event
</UL>

<P><STRONG><a name="[e9]"></a>HW_set_slave</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, le_connection.o(i.HW_set_slave))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Close_Connection_Event
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Handle_Connection_Event
</UL>

<P><STRONG><a name="[e8]"></a>HWle_abort_tifs_count</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, le_connection.o(i.HWle_abort_tifs_count))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Close_Connection_Event
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Handle_Connection_Event
</UL>

<P><STRONG><a name="[e3]"></a>HWle_set_aes_llid</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, le_connection.o(i.HWle_set_aes_llid))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Encrypt_Payload
</UL>

<P><STRONG><a name="[e0]"></a>HWle_set_aes_mode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, le_connection.o(i.HWle_set_aes_mode))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Encrypt_Payload
</UL>

<P><STRONG><a name="[e4]"></a>HWle_set_aes_pkt_length</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, le_connection.o(i.HWle_set_aes_pkt_length))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Encrypt_Payload
</UL>

<P><STRONG><a name="[b0]"></a>HWle_set_rx_mode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, le_connection.o(i.HWle_set_rx_mode))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Handle_Connection_Event
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_Connection_Event
</UL>

<P><STRONG><a name="[116]"></a>HWle_set_tx_length_data</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, le_connection.o(i.HWle_set_tx_length_data))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Encode_DataPDU
</UL>

<P><STRONG><a name="[115]"></a>HWle_set_tx_llid</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, le_connection.o(i.HWle_set_tx_llid))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Encode_DataPDU
</UL>

<P><STRONG><a name="[b1]"></a>LEconnection_Update_Next_Slave_Connection_Event_Time</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, le_connection.o(i.LEconnection_Update_Next_Slave_Connection_Event_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEconnection_Update_Next_Slave_Connection_Event_Time
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Bt_Clk_Avoid_Race
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_Connection_Event
</UL>

<P><STRONG><a name="[e1]"></a>hw_memcpy32</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, le_connection.o(i.hw_memcpy32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hw_memcpy32
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Encode_DataPDU
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Decode_DataPDU
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Encrypt_Payload
</UL>

<P><STRONG><a name="[f2]"></a>hw_memcpy32</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, le_link_layer.o(i.hw_memcpy32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hw_memcpy32
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEll_Encode_Advertising_ChannelPDU
</UL>

<P><STRONG><a name="[c8]"></a>HW_set_rx_mode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, le_advertise.o(i.HW_set_rx_mode))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Advertising_Event_Complete
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Advance_For_Next_Adv_Tx
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Prep_For_LE_Scan_Resp_Tx
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Prep_For_LE_Advert_Tx
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Advertising_Event_Begin
</UL>

<P><STRONG><a name="[c9]"></a>HW_set_slave</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, le_advertise.o(i.HW_set_slave))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Advertising_Event_Begin
</UL>

<P><STRONG><a name="[d4]"></a>HWle_abort_tifs_count</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, le_advertise.o(i.HWle_abort_tifs_count))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Advertising_Event_Complete
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
</UL>

<P><STRONG><a name="[d0]"></a>HWle_clear_le_spi_only</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, le_advertise.o(i.HWle_clear_le_spi_only))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Advertising_Event_Complete
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
</UL>

<P><STRONG><a name="[d1]"></a>HWle_clear_tx_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, le_advertise.o(i.HWle_clear_tx_enable))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Advertising_Event_Complete
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
</UL>

<P><STRONG><a name="[cd]"></a>_LEadv_Set_Next_Advertising_Event_Start_Timer</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, le_advertise.o(i._LEadv_Set_Next_Advertising_Event_Start_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _LEadv_Set_Next_Advertising_Event_Start_Timer &rArr; HW_Get_Native_Clk_Avoid_Race &rArr; HWdelay_Wait_For_us
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Get_Rand
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Set_Advertise_Enable
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Advertising_Event_Begin
</UL>

<P><STRONG><a name="[ca]"></a>hw_memcpy32</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, le_advertise.o(i.hw_memcpy32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hw_memcpy32
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Advertising_Event_Begin
</UL>

<P><STRONG><a name="[fc]"></a>HW_set_rx_mode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, le_test.o(i.HW_set_rx_mode))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEtest_Test_Event_Complete
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEtest_Prep_For_LE_Test_Rx
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtest_Ctrl_Handle_Test_Mode_Event
</UL>

<P><STRONG><a name="[f7]"></a>HW_set_slave</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, le_test.o(i.HW_set_slave))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtest_Ctrl_Handle_Test_Mode_Event
</UL>

<P><STRONG><a name="[fd]"></a>HWle_clear_tx_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, le_test.o(i.HWle_clear_tx_enable))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEtest_Test_Event_Complete
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEtest_Packet_Send_Complete
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtest_Test_Event_Begin
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtest_Ctrl_Handle_Test_Mode_Event
</UL>

<P><STRONG><a name="[28]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[65]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
